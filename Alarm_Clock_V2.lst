0000              1   ; ISR_example.asm: a) Increments/decrements a BCD variable every half second using
0000              2   ; an ISR for timer 2; b) Generates a 440 Hz square wave at pin P3.7 using
0000              3   ; an ISR for timer 0; and c) in the 'main' loop it displays the variable
0000              4   ; incremented/decremented using the ISR for timer 2 on the LCD.  Also resets it to 
0000              5   ; zero if the 'BOOT' pushbutton connected to P3.7 is pressed.
                  7   $LIST
0000              9   
0000             10   CLK           EQU 24000000 ; Microcontroller system crystal frequency in Hz
0000             11   TIMER0_RATE   EQU 544*2    ; Tone changed to C#
0000             12   TIMER0_RELOAD EQU ((65536-(CLK/(TIMER0_RATE))))
0000             13   TIMER2_RATE   EQU 1000     ; 1000Hz, for a timer tick of 1ms
0000             14   TIMER2_RELOAD EQU ((65536-(CLK/(TIMER2_RATE))))
0000             15   
0000             16   BOOT_BUTTON   equ P3.7
0000             17   SOUND_OUT     equ P2.1
0000             18   UPDOWN        equ P0.0
0000             19   
0000             20   ; Reset vector
0000             21   org 0x0000
0000 020184      22       ljmp main
0003             23   
0003             24   ; External interrupt 0 vector (not used in this code)
0003             25   org 0x0003
0003 32          26            reti
0004             27   
0004             28   ; Timer/Counter 0 overflow interrupt vector
000B             29   org 0x000B
000B 0200FE      30            ljmp Timer0_ISR
000E             31   
000E             32   ; External interrupt 1 vector (not used in this code)
0013             33   org 0x0013
0013 32          34            reti
0014             35   
0014             36   ; Timer/Counter 1 overflow interrupt vector (not used in this code)
001B             37   org 0x001B
001B 32          38            reti
001C             39   
001C             40   ; Serial port receive/transmit interrupt vector (not used in this code)
0023             41   org 0x0023 
0023 32          42            reti
0024             43            
0024             44   ; Timer/Counter 2 overflow interrupt vector
002B             45   org 0x002B
002B 020127      46            ljmp Timer2_ISR
002E             47   
002E             48   ; In the 8051 we can define direct access variables starting at location 0x30 up to location 0x7F
0030             49   dseg at 0x30
0030             50   Count1ms:      ds 2 ; Used to determine when half second has passed
0032             51   CurrentTime:   ds 5
0037             52   CurrentAMPM:    ds 1
0038             53   AlarmHour:     ds 2
003A             54   AlarmMinute:   ds 2
003C             55   AlarmSecond:   ds 2
003E             56   AlarmAMPM:      ds 1
003F             57   
003F             58   ; In the 8051 we have variables that are 1-bit in size.  We can use the setb, clr, jb, and jnb
003F             59   ; instructions with these variables.  This is how you define a 1-bit variable:
0000             60   bseg
0000             61   half_seconds_flag: dbit 1 ; Set to one in the ISR every time 500 ms had passed
0001             62   
002E             63   cseg
002E             64   ; These 'equ' must match the wiring between the microcontroller and the LCD!
002E             65   LCD_RS equ P2.0
002E             66   LCD_RW equ P1.7
002E             67   LCD_E  equ P1.6
002E             68   LCD_D4 equ P1.1
002E             69   LCD_D5 equ P1.0
002E             70   LCD_D6 equ P0.7
002E             71   LCD_D7 equ P0.6
                 73   	$LIST
00DC             75   
00DC             76   ;                     1234567890123456    <- This helps determine the location of the counter
00DC 78783A78    77   Initial_Message:  db 'xx:xx:xx xx', 0 ; hour:minute:second am/pm
     783A7878
     20787800
00E8             78   
00E8             79   ;-----------------------------------;
00E8             80   ; Routine to initialize the timer 0 ;
00E8             81   ;-----------------------------------;
00E8             82   Timer0_Init:
00E8 438E04      83            orl CKCON0, #00000100B ; Timer 0 uses the system clock
00EB E589        84            mov a, TMOD
00ED 54F0        85            anl a, #0xf0 ; Clear the bits for timer 0
00EF 4401        86            orl a, #0x01 ; Configure timer 0 as 16-timer
00F1 F589        87            mov TMOD, a
00F3 758CA9      88            mov TH0, #high(TIMER0_RELOAD)
00F6 758AD6      89            mov TL0, #low(TIMER0_RELOAD)
00F9             90            ; Enable the timer and interrupts
00F9 D2A9        91       setb ET0  ; Enable timer 0 interrupt
00FB D28C        92       setb TR0  ; Start timer 0
00FD 22          93            ret
00FE             94   
00FE             95   ;---------------------------------;
00FE             96   ; ISR for timer 0.                ;
00FE             97   ;---------------------------------;
00FE             98   Timer0_ISR:
00FE             99            ;clr TF0  ; According to the data sheet this is done for us already.
00FE            100            ; Timer 0 can not autoreload so we need to reload it in the ISR:
00FE C28C       101            clr TR0
0100 758CA9     102            mov TH0, #high(TIMER0_RELOAD)
0103 758AD6     103            mov TL0, #low(TIMER0_RELOAD)
0106 D28C       104            setb TR0
0108 B2A1       105            cpl SOUND_OUT ; Toggle the pin connected to the speaker
010A 32         106            reti
010B            107   
010B            108   ;---------------------------------;
010B            109   ; Routine to initialize timer 2   ;
010B            110   ;---------------------------------;
010B            111   Timer2_Init:
010B 438E10     112            orl CKCON0, #0b00010000 ; Timer 2 uses the system clock
010E 75C800     113            mov TMR2CN0, #0 ; Stop timer/counter.  Autoreload mode.
0111 75CFA2     114            mov TMR2H, #high(TIMER2_RELOAD)
0114 75CE40     115            mov TMR2L, #low(TIMER2_RELOAD)
0117            116            ; Set the reload value
0117 75CBA2     117            mov TMR2RLH, #high(TIMER2_RELOAD)
011A 75CA40     118            mov TMR2RLL, #low(TIMER2_RELOAD)
011D            119            ; Init One millisecond interrupt counter.  It is a 16-bit variable made with two 8-bit parts
011D E4         120            clr a
011E F530       121            mov Count1ms+0, a
0120 F531       122            mov Count1ms+1, a
0122            123            ; Enable the timer and interrupts
0122 D2AD       124       setb ET2  ; Enable timer 2 interrupt
0124 D2CA       125       setb TR2  ; Enable timer 2
0126 22         126            ret
0127            127   
0127            128   ;---------------------------------;
0127            129   ; ISR for timer 2                 ;
0127            130   ;---------------------------------;
0127            131   Timer2_ISR:
0127 C2CF       132            clr TF2H  ; Timer 2 doesn't clear TF2H automatically. Do it in ISR
0129            133            
0129            134            ; The two registers used in the ISR must be saved in the stack
0129 C0E0       135            push acc
012B C0D0       136            push psw
012D            137            
012D            138            ; Increment the 16-bit one mili second counter
012D 0530       139            inc Count1ms+0    ; Increment the low 8-bits first
012F E530       140            mov a, Count1ms+0 ; If the low 8-bits overflow, then increment high 8-bits
0131 7002       141            jnz Inc_Done
0133 0531       142            inc Count1ms+1
0135            143   
0135            144   Inc_Done:
0135            145            ; Check if half second has passed
0135 E530       146            mov a, Count1ms+0
0137 B4F419     147            cjne a, #low(500), Timer2_ISR_done ; Warning: this instruction changes the carry flag!
013A E531       148            mov a, Count1ms+1
013C B40114     149            cjne a, #high(500), Timer2_ISR_done
013F            150            
013F            151            ; 500 milliseconds have passed.  Set a flag so the main program knows
013F D200       152            setb half_seconds_flag ; Let the main program know half second had passed
0141 B28C       153            cpl TR0 ; Enable/disable timer/counter 0. This line creates a beep-silence-beep-silence sound.
0143 D2A1       154            setb SOUND_OUT
0145            155            ; Reset to zero the milli-seconds counter, it is a 16-bit variable
0145 E4         156            clr a
0146 F530       157            mov Count1ms+0, a
0148 F531       158            mov Count1ms+1, a
014A            159            ; Increment the BCD counter
014A E532       160            mov a, CurrentTime
014C            161            ;jnb UPDOWN, Timer2_ISR_decrement
014C 2401       162            add a, #0x00001
014E 8000       163            sjmp Timer2_ISR_da
0150            164   ;Timer2_ISR_decrement:
0150            165            ;add a, #0x99 ; Adding the 10-complement of -1 is like subtracting 1.
0150            166   Timer2_ISR_da:
0150 D4         167            da a ; Decimal adjust instruction.  Check datasheet for more details!
0151 F532       168            mov CurrentTime, a
0153            169            
0153            170   Timer2_ISR_done:
0153 D0D0       171            pop psw
0155 D0E0       172            pop acc
0157 32         173            reti
0158            174   
0158            175   
0158            176   ;---------------------------------;
0158            177   ; Hardware initialization         ;
0158            178   ;---------------------------------;
0158            179   Initialize_All:
0158            180       ; DISABLE WDT: provide Watchdog disable keys
0158 7597DE     181            mov     WDTCN,#0xDE ; First key
015B 7597AD     182            mov     WDTCN,#0xAD ; Second key
015E            183   
015E            184            ; Setup the stack start to the begining of memory only accesible with pointers
015E 75817F     185       mov SP, #7FH
0161            186       
0161            187       ; Enable crossbar and weak pull-ups
0161 75E100     188            mov     XBR0,#0x00
0164 75E200     189            mov     XBR1,#0x00
0167 75E340     190            mov     XBR2,#0x40
016A            191   
016A 75A602     192            mov     P2MDOUT,#0x02 ; make sound output pin (P2.1) push-pull
016D            193            
016D            194            ; Switch clock to 24 MHz
016D 75A900     195            mov     CLKSEL, #0x00 ; 
0170 75A900     196            mov     CLKSEL, #0x00 ; Second write to CLKSEL is required according to the user manual (page 77)
0173            197            
0173            198            ; Wait for 24 MHz clock to stabilze by checking bit DIVRDY in CLKSEL
0173            199   waitclockstable:
0173 E5A9       200            mov a, CLKSEL
0175 30E7FB     201            jnb acc.7, waitclockstable 
0178            202   
0178            203            ; Initialize the two timers used in this program
0178 1200E8     204       lcall Timer0_Init
017B 12010B     205       lcall Timer2_Init
017E            206   
017E 120088     207       lcall LCD_4BIT ; Initialize LCD
0181            208       
0181 D2AF       209       setb EA   ; Enable Global interrupts
0183            210   
0183 22         211            ret
0184            212            
0184            213   
0184            214   main:
0184 120158     215            lcall Initialize_All
0187            216            
0187            217       ; For convenience a few handy macros are included in 'LCD_4bit.inc':
0187 C0E0       218            push acc
0189 7401       218            mov a, #1
018B 14         218            dec a
018C 1200C1     218            lcall ?Set_Cursor_1 ; Select column and row
018F D0E0       218            pop acc
0191 C083       219            push dph
0193 C082       219            push dpl
0195 C0E0       219            push acc
0197 9000DC     219            mov dptr, #Initial_Message
019A 1200B4     219            lcall ?Send_Constant_String
019D D0E0       219            pop acc
019F D082       219            pop dpl
01A1 D083       219            pop dph
01A3 D200       220       setb half_seconds_flag
01A5 753200     221            mov CurrentTime, #0x00000
01A8            222       ; TODO don't know if AM/PM should be here yet
01A8            223            
01A8            224            ; After initialization the program stays in this 'forever' loop
01A8            225   loop:
01A8 20B71C     226            jb BOOT_BUTTON, loop_a  ; if the 'BOOT' button is not pressed skip
01AB C002       227            push AR2
01AD 7A32       227            mov R2, #50
01AF 120039     227            lcall ?Wait_Milli_Seconds
01B2 D002       227            pop AR2         ; Debounce delay.  This macro is also in 'LCD_4bit.inc'
01B4 20B710     228            jb BOOT_BUTTON, loop_a  ; if the 'BOOT' button is not pressed skip
01B7 30B7FD     229            jnb BOOT_BUTTON, $              ; Wait for button release.  The '$' means: jump to same instruction.
01BA            230            ; A valid press of the 'BOOT' button has been detected, reset the BCD counter.
01BA            231            ; But first stop timer 2 and reset the milli-seconds counter, to resync everything.
01BA C2CA       232            clr TR2                 ; Stop timer 2
01BC E4         233            clr a
01BD F530       234            mov Count1ms+0, a
01BF F531       235            mov Count1ms+1, a
01C1            236            ; Now clear the BCD counter
01C1            237            ;mov CurrentHour, a
01C1            238       ;mov CurrentMinute, a
01C1 F532       239       mov CurrentTime, a
01C3 D2CA       240            setb TR2                ; Start timer 2
01C5 8003       241            sjmp loop_b             ; Display the new value
01C7            242   loop_a:
01C7 3000DE     243            jnb half_seconds_flag, loop
01CA            244   loop_b:
01CA C200       245       clr half_seconds_flag ; We clear this flag in the main loop, but it is set in the ISR for timer 2
01CC C0E0       246            push acc
01CE 7407       246            mov a, #7
01D0 14         246            dec a
01D1 1200BF     246            lcall ?Set_Cursor_2 ; Select column and row
01D4 D0E0       246            pop acc
01D6 C000       247            push ar0
01D8 A832       247            mov r0, CurrentTime
01DA 1200C6     247            lcall ?Display_BCD
01DD D000       247            pop ar0
01DF 0201A8     248       ljmp loop
01E2            249   END
